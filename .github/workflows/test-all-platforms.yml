name: Test All Platforms

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: üõéÔ∏è Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.x
        
    - name: üì¶ Install Build Tools
      run: |
        echo "Installing build tools for ${{ runner.os }}..."
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc
          gcc --version
        elif [ "${{ runner.os }}" == "macOS" ]; then
          xcode-select -p || xcode-select --install
          brew install gcc || echo "GCC installation skipped, using clang"
          clang --version
        elif [ "${{ runner.os }}" == "Windows" ]; then
          # Try to find existing GCC or install MinGW
          gcc --version || echo "GCC not available, will try to use existing compiler"
        fi
        
    - name: üèóÔ∏è Build C Library
      run: |
        echo "Building C library on ${{ runner.os }}..."
        if [ "${{ runner.os }}" == "Windows" ]; then
          # Use PowerShell for Windows with proper error handling
          pwsh -Command "& { .\build-windows.ps1 }"
        else
          chmod +x build.sh
          ./build.sh
        fi
        
        echo "Built files:"
        if [ "${{ runner.os }}" == "Windows" ]; then
          dir libs\
        else
          ls -la libs/
        fi
        
    - name: üéØ Build C# Application
      run: |
        cd app
        echo "Building C# app for ${{ runner.os }}..."
        dotnet build --configuration Release --verbosity minimal
        
        echo "Build output files:"
        if [ "${{ runner.os }}" == "Windows" ]; then
          dir bin\Release\net9.0\
        else
          ls -la bin/Release/net9.0/
        fi
        
    - name: üîç Verify Native Library Location
      run: |
        cd app
        echo "Checking for native library in output directory..."
        if [ "${{ runner.os }}" == "Windows" ]; then
          dir bin\Release\net9.0\*.dll
        elif [ "${{ runner.os }}" == "Linux" ]; then
          ls -la bin/Release/net9.0/*.so
        elif [ "${{ runner.os }}" == "macOS" ]; then
          ls -la bin/Release/net9.0/*.dylib
        fi
        
    - name: üöÄ Run Application
      run: |
        cd app
        echo "Running application on ${{ runner.os }}..."
        
        # Set library path for Linux/macOS
        if [ "${{ runner.os }}" == "Linux" ]; then
          export LD_LIBRARY_PATH=$PWD/bin/Release/net9.0:$LD_LIBRARY_PATH
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        elif [ "${{ runner.os }}" == "macOS" ]; then
          export DYLD_LIBRARY_PATH=$PWD/bin/Release/net9.0:$DYLD_LIBRARY_PATH
          echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
        fi
        
        dotnet run --configuration Release --no-build
        echo "‚úÖ Application ran successfully!"
        
    - name: üìä Show Success
      run: |
        echo "üéâ SUCCESS: ${{ matrix.platform }} build and test completed!"
        echo "Platform: ${{ runner.os }}"